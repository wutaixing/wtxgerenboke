<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wtx.myblog.mapper.ArticleMapper">

    <insert id="insertArticle">
        insert article(articleId,articleTitle,articleContent,articleTags,articleType,
               articleCategories,originalAuthor,articleUrl,publishDate,articleTabloid,
               author,updateDate,likes,releaseStatus)
        values(#{articleRequestVO.id},#{articleRequestVO.articleTitle},#{articleRequestVO.articleContent},#{tags},#{articleRequestVO.articleType},
                #{articleRequestVO.articleCategories},#{articleRequestVO.originalAuthor},#{articleRequestVO.articleUrl},#{articleRequestVO.publishDate},#{articleRequestVO.articleHtmlContent},
                #{articleRequestVO.author},#{articleRequestVO.updateDate},#{articleRequestVO.likes},#{articleRequestVO.releaseStatus})
    </insert>
    <insert id="inserttags">
        insert into tags(tagName,tagSize) values(#{tagName},#{tagSize})
    </insert>
    <delete id="deleteArticleByid">
        DELETE FROM article WHERE id = #{id}
    </delete>


    <!-- 查找早于当前文章的最新文章 -->
    <select id="findLatestArticleBefore" resultType="Long">
        SELECT articleId FROM article
        WHERE publishDate &lt; (SELECT publishDate FROM article WHERE articleId = #{currentArticleId})
        ORDER BY publishDate DESC
        LIMIT 1
    </select>

    <!-- 查找晚于当前文章的最早文章 -->
    <select id="findEarliestArticleAfter" resultType="Long">
        SELECT articleId FROM article
        WHERE publishDate &gt; (SELECT publishDate FROM article WHERE articleId = #{currentArticleId})
        ORDER BY publishDate ASC
            LIMIT 1
    </select>

    <select id="selectAllArticles" resultType="com.wtx.myblog.model.Article">
        SELECT * FROM article WHERE releaseStatus = 1
    </select>
    <select id="getDraftArticleById" resultType="com.wtx.myblog.model.Article">
        SELECT * FROM article WHERE id = #{id}
    </select>
    <select id="getDraftArticleByUserName" resultType="com.wtx.myblog.model.Article">
        SELECT * FROM article WHERE author = #{username} AND releaseStatus = 0
    </select>
    <select id="findArticleByArticleId" resultType="java.lang.Boolean">
        SELECT EXISTS(SELECT * FROM article WHERE id = #{articleId})
    </select>
    <select id="getDraftArticleArticleIdById" resultType="com.wtx.myblog.model.Article">
        SELECT * FROM article WHERE id = #{id} AND releaseStatus = 0
    </select>
    <select id="getArticleIdById" resultType="com.wtx.myblog.model.Article">
        SELECT * FROM article WHERE id = #{id}
    </select>
    <select id="getAllIsReadArticleByUserName" resultType="com.wtx.myblog.model.vo.IsReadResponseVO">
        SELECT
            alr.*,
            u.username AS praisePeople,
            a.articleTitle
        FROM
            article_likes_record alr
                JOIN `user` u ON alr.likerId = u.id
                JOIN article a ON alr.articleId = a.articleId
        WHERE
            a.author = #{author}
    </select>
    <select id="countUnreadLikesByAuthor" resultType="java.lang.Integer">
        SELECT COUNT(alr.id)
        FROM article_likes_record alr
                 JOIN `user` u ON alr.likerId = u.id
                 JOIN article a ON alr.articleId = a.articleId
        WHERE a.author = #{author} AND alr.isRead = 1
    </select>

    <!-- 更新文章的上下关系 -->
    <update id="updateArticleRelations">
        UPDATE article
        SET lastArticleId = #{lastId}, nextArticleId = #{nextId}
        WHERE articleId = #{currentId}
    </update>
    <!-- 更新上一篇文章的nextArticleId指向当前文章 -->
    <update id="updateLastArticleNextPointer">
        UPDATE article SET nextArticleId = #{currentArticleId} WHERE articleId = #{lastArticleId}
    </update>

    <!-- 更新下一篇文章的lastArticleId指向当前文章 -->
    <update id="updateNextArticleLastPointer">
        UPDATE article SET lastArticleId = #{currentArticleId} WHERE articleId = #{nextArticleId}
    </update>
    <update id="setArticleReleaseStatusById">
        UPDATE article SET releaseStatus = #{status} WHERE id = #{id}
    </update>
    <update id="updateArticleByIdAndArticle">
        UPDATE article
        SET articleTitle = #{oldArticle.articleTitle},articleContent = #{oldArticle.articleContent},articleTags = #{oldArticle.articleTags},articleType = #{oldArticle.articleType},
            articleCategories = #{oldArticle.articleCategories},originalAuthor = #{oldArticle.originalAuthor},articleUrl = #{oldArticle.articleUrl},
            articleContent = #{oldArticle.articleContent},author = #{oldArticle.author},updateDate = #{oldArticle.updateDate},releaseStatus = #{oldArticle.releaseStatus}
        WHERE
            id = #{id}
    </update>
    <update id="markLikeAsRead">
        UPDATE article_likes_record
        SET
            isRead = 0
        WHERE
            id = #{id}
    </update>
    <update id="markAllLikesAsRead">
        UPDATE article_likes_record alr
            JOIN `user` u ON alr.likerId = u.id
            JOIN article a ON alr.articleId = a.articleId
            SET alr.isRead = 0
        WHERE
            a.author = #{author} AND alr.isRead = 1
    </update>

</mapper>

